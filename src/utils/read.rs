use std::io::{self, Write};

/// Prompt the user, read cli, trim it, and return
pub fn read_line() -> String {
    let mut input = String::new();

    print!("> ");
    io::stdout().flush().expect("failed to flush stdout");

    // Read from stdin
    io::stdin()
        .read_line(&mut input)
        .expect("failed to read from stdin");
    input.trim().to_string()
}

pub fn print_banner() {
    println!(
        r#"
     ███████████                       █████               ███████████                                                                     
    ░░███░░░░░███                     ░░███               ░░███░░░░░███                                                                    
    ░███    ░███  █████ ████  █████  ███████   █████ ████ ░███    ░███  █████ ████ ████████   █████ ███ █████  ██████   █████ ████  █████ 
    ░██████████  ░░███ ░███  ███░░  ░░░███░   ░░███ ░███  ░██████████  ░░███ ░███ ░░███░░███ ░░███ ░███░░███  ░░░░░███ ░░███ ░███  ███░░  
    ░███░░░░░███  ░███ ░███ ░░█████   ░███     ░███ ░███  ░███░░░░░███  ░███ ░███  ░███ ░███  ░███ ░███ ░███   ███████  ░███ ░███ ░░█████ 
    ░███    ░███  ░███ ░███  ░░░░███  ░███ ███ ░███ ░███  ░███    ░███  ░███ ░███  ░███ ░███  ░░███████████   ███░░███  ░███ ░███  ░░░░███
    █████   █████ ░░████████ ██████   ░░█████  ░░███████  █████   █████ ░░████████ ████ █████  ░░████░████   ░░████████ ░░███████  ██████ 
    ░░░░░   ░░░░░   ░░░░░░░░ ░░░░░░     ░░░░░    ░░░░░███ ░░░░░   ░░░░░   ░░░░░░░░ ░░░░ ░░░░░    ░░░░ ░░░░     ░░░░░░░░   ░░░░░███ ░░░░░░  
                                                ███ ░███                                                                 ███ ░███         
                                                ░░██████                                                                 ░░██████          
                                                ░░░░░░                                                                   ░░░░░░           
    "#
    );
}
