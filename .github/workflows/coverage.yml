name: Coverage

on:
  pull_request:
  push:
    branches: [ main ]

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust
        uses: Swatinem/rust-cache@v2

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Run coverage (Rust + Python)
        env:
          RUST_FAIL_UNDER: '0'
          PY_FAIL_UNDER: '0'
        run: bash scripts/coverage.sh

      - name: Run frontend coverage (React) if tests exist
        working-directory: apps/tauri/ui
        run: |
          set -euo pipefail
          if [ ! -f package.json ]; then
            echo "No frontend package.json found; skipping frontend coverage."
            exit 0
          fi
          # Detect if a test script exists; if not, skip gracefully
          if node -e "const p=require('./package.json');process.exit(p.scripts&&p.scripts.test?0:1)"; then
            echo "Installing frontend dependencies and running tests with coverage..."
            npm ci || npm install --no-audit --no-fund
            # Try common runners; prefer vitest if present
            if node -e "const p=require('./package.json');process.exit((p.devDependencies&&p.devDependencies.vitest)||(p.dependencies&&p.dependencies.vitest)?0:1)"; then
              npx vitest run --coverage --reporter=dot || npx vitest run --coverage
            else
              # Fall back to npm test with coverage flags if supported
              npm test -- --coverage --watchAll=false || echo "Frontend tests ran/skipped; proceeding"
            fi
          else
            echo "No frontend test script found; skipping frontend coverage."
          fi
          # Collect lcov if produced
          mkdir -p ../../../coverage/frontend
          if [ -f coverage/lcov.info ]; then
            cp coverage/lcov.info ../../../coverage/frontend/lcov.info
          elif [ -f ./coverage/coverage-final.json ]; then
            # Some setups only produce JSON; Codecov can ingest JSON from some tools
            cp ./coverage/coverage-final.json ../../../coverage/frontend/coverage-final.json
          fi

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage/**

      - name: Upload Rust coverage to Codecov
        if: ${{ always() }}
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: coverage/rust/cobertura.xml
          flags: rust
          name: rust-coverage
          fail_ci_if_error: true

      - name: Upload Python coverage to Codecov
        if: ${{ always() }}
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: coverage/python/coverage.xml
          flags: python
          name: python-coverage
          fail_ci_if_error: true

      - name: Upload Frontend coverage to Codecov (if present)
        if: ${{ hashFiles('coverage/frontend/lcov.info') != '' || hashFiles('coverage/frontend/coverage-final.json') != '' }}
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: |
            coverage/frontend/lcov.info
            coverage/frontend/coverage-final.json
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: true
